
9/16/2019 9:43:47 AM
------------------------------------------------------------------------------------------------
Controller Name :- Account
Action Method Name :- AssignUserRole
------------------------------------------------------------------------------------------------
Microsoft.AspNetCore.Mvc.Filters.ExceptionContext
Message ---
{0}A second operation started on this context before a previous operation completed. This is usually caused by different threads using the same instance of DbContext, however instance members are not guaranteed to be thread safe. This could also be caused by a nested query being evaluated on the client, if this is the case rewrite the query avoiding nested invocations.
Source ---
{0}RequisitionManagement.Web
StackTrace ---
{0}   at RequisitionManagement.Web.Controllers.AccountController.AssignUserRole() in C:\Users\User\Source\Repos\CyberspaceRequisition\RequisitionManagement.Web\Controllers\AccountController.cs:line 300
   at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextExceptionFilterAsync()
TargetSite ---
{0}Void MoveNext()


9/16/2019 10:37:29 AM
------------------------------------------------------------------------------------------------
Controller Name :- Account
Action Method Name :- AssignUserRole
------------------------------------------------------------------------------------------------
Microsoft.AspNetCore.Mvc.Filters.ExceptionContext
Message ---
{0}A second operation started on this context before a previous operation completed. This is usually caused by different threads using the same instance of DbContext, however instance members are not guaranteed to be thread safe. This could also be caused by a nested query being evaluated on the client, if this is the case rewrite the query avoiding nested invocations.
Source ---
{0}RequisitionManagement.Web
StackTrace ---
{0}   at RequisitionManagement.Web.Controllers.AccountController.AssignUserRole() in C:\Users\User\Source\Repos\CyberspaceRequisition\RequisitionManagement.Web\Controllers\AccountController.cs:line 300
   at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextExceptionFilterAsync()
TargetSite ---
{0}Void MoveNext()


9/16/2019 11:35:44 AM
------------------------------------------------------------------------------------------------
Controller Name :- Account
Action Method Name :- AssignUserRole
------------------------------------------------------------------------------------------------
Microsoft.AspNetCore.Mvc.Filters.ExceptionContext
Message ---
{0}A second operation started on this context before a previous operation completed. This is usually caused by different threads using the same instance of DbContext, however instance members are not guaranteed to be thread safe. This could also be caused by a nested query being evaluated on the client, if this is the case rewrite the query avoiding nested invocations.
Source ---
{0}RequisitionManagement.Web
StackTrace ---
{0}   at RequisitionManagement.Web.Controllers.AccountController.AssignUserRole() in C:\Users\User\Source\Repos\CyberspaceRequisition\RequisitionManagement.Web\Controllers\AccountController.cs:line 300
   at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextExceptionFilterAsync()
TargetSite ---
{0}Void MoveNext()

